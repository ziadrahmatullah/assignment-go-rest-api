// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/dto"
	mock "github.com/stretchr/testify/mock"

	model "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/model"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// ChooseBox provides a mock function with given fields: _a0, _a1, _a2
func (_m *GameRepository) ChooseBox(_a0 context.Context, _a1 model.Box, _a2 model.Wallet) (*dto.ChooseBoxRes, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dto.ChooseBoxRes
	if rf, ok := ret.Get(0).(func(context.Context, model.Box, model.Wallet) *dto.ChooseBoxRes); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChooseBoxRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Box, model.Wallet) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllBoxes provides a mock function with given fields: _a0
func (_m *GameRepository) FindAllBoxes(_a0 context.Context) ([]dto.GameBoxesRes, error) {
	ret := _m.Called(_a0)

	var r0 []dto.GameBoxesRes
	if rf, ok := ret.Get(0).(func(context.Context) []dto.GameBoxesRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GameBoxesRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBoxById provides a mock function with given fields: _a0, _a1
func (_m *GameRepository) FindBoxById(_a0 context.Context, _a1 uint) (*model.Box, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Box
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.Box); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRepository creates a new instance of GameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRepository(t mockConstructorTestingTNewGameRepository) *GameRepository {
	mock := &GameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
