// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/dto"
	mock "github.com/stretchr/testify/mock"

	model "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/model"
)

// TransactionUsecase is an autogenerated mock type for the TransactionUsecase type
type TransactionUsecase struct {
	mock.Mock
}

// GetTransactions provides a mock function with given fields: _a0, _a1
func (_m *TransactionUsecase) GetTransactions(_a0 context.Context, _a1 dto.ListTransactionsReq) ([]model.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListTransactionsReq) []model.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.ListTransactionsReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: _a0, _a1, _a2
func (_m *TransactionUsecase) TopUp(_a0 context.Context, _a1 dto.TopUpReq, _a2 uint) (*model.Transaction, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, dto.TopUpReq, uint) *model.Transaction); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TopUpReq, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: _a0, _a1, _a2
func (_m *TransactionUsecase) Transfer(_a0 context.Context, _a1 dto.TransferReq, _a2 uint) (*model.Transaction, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, dto.TransferReq, uint) *model.Transaction); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TransferReq, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUsecase creates a new instance of TransactionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUsecase(t mockConstructorTestingTNewTransactionUsecase) *TransactionUsecase {
	mock := &TransactionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
