// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/assignment-go-rest-api/dto"
	mock "github.com/stretchr/testify/mock"
)

// GameUsecase is an autogenerated mock type for the GameUsecase type
type GameUsecase struct {
	mock.Mock
}

// ChooseBox provides a mock function with given fields: _a0, _a1, _a2
func (_m *GameUsecase) ChooseBox(_a0 context.Context, _a1 dto.GameBoxReq, _a2 uint) (*dto.ChooseBoxRes, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dto.ChooseBoxRes
	if rf, ok := ret.Get(0).(func(context.Context, dto.GameBoxReq, uint) *dto.ChooseBoxRes); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChooseBoxRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.GameBoxReq, uint) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBoxes provides a mock function with given fields: _a0
func (_m *GameUsecase) GetAllBoxes(_a0 context.Context) ([]dto.GameBoxesRes, error) {
	ret := _m.Called(_a0)

	var r0 []dto.GameBoxesRes
	if rf, ok := ret.Get(0).(func(context.Context) []dto.GameBoxesRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.GameBoxesRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingAttempt provides a mock function with given fields: _a0, _a1
func (_m *GameUsecase) GetRemainingAttempt(_a0 context.Context, _a1 uint) (*dto.AttemptRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.AttemptRes
	if rf, ok := ret.Get(0).(func(context.Context, uint) *dto.AttemptRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AttemptRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameUsecase creates a new instance of GameUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameUsecase(t mockConstructorTestingTNewGameUsecase) *GameUsecase {
	mock := &GameUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
